// Generated by github.com/davyxu/tabtoy
// Version: 2.9.0
// DO NOT EDIT!!
using System.Collections.Generic;

namespace gtmGame
{
	
	

	// Defined in table: ServerListCfg
	
	public partial class ServerListCfg
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// ServerList
		/// </summary>
		public List<ServerListDefine> ServerList = new List<ServerListDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, ServerListDefine> _ServerListByID = new Dictionary<int, ServerListDefine>();
        public ServerListDefine GetServerListByID(int ID, ServerListDefine def = default(ServerListDefine))
        {
            ServerListDefine ret;
            if ( _ServerListByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ServerListDefine) )
			{
				TableLogger.ErrorLine("GetServerListByID failed, ID: {0}", ID);
			}

            return def;
        }
		
		public string GetBuildID(){
			return "d41d8cd98f00b204e9800998ecf8427e";
		}
	
		#endregion
		#region Deserialize code
		
		static tabtoy.DeserializeHandler<ServerListCfg> _ServerListCfgDeserializeHandler;
		static tabtoy.DeserializeHandler<ServerListCfg> ServerListCfgDeserializeHandler
		{
			get
			{
				if (_ServerListCfgDeserializeHandler == null )
				{
					_ServerListCfgDeserializeHandler = new tabtoy.DeserializeHandler<ServerListCfg>(Deserialize);
				}

				return _ServerListCfgDeserializeHandler;
			}
		}
		public static void Deserialize( ServerListCfg ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.ServerList.Add( reader.ReadStruct<ServerListDefine>(ServerListDefineDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
			// Build ServerList Index
			for( int i = 0;i< ins.ServerList.Count;i++)
			{
				var element = ins.ServerList[i];
				
				ins._ServerListByID.Add(element.ID, element);
				
			}
			
		}
		static tabtoy.DeserializeHandler<ServerListDefine> _ServerListDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<ServerListDefine> ServerListDefineDeserializeHandler
		{
			get
			{
				if (_ServerListDefineDeserializeHandler == null )
				{
					_ServerListDefineDeserializeHandler = new tabtoy.DeserializeHandler<ServerListDefine>(Deserialize);
				}

				return _ServerListDefineDeserializeHandler;
			}
		}
		public static void Deserialize( ServerListDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Ip = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Port = reader.ReadString();
                	}
                	break; 
                }
             } 

			
		}
		#endregion
	

	} 

	// Defined in table: ServerList
	[System.Serializable]
	public partial class ServerListDefine
	{
	
		
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 服务器ip
		/// </summary>
		public string Ip = ""; 
		
		/// <summary> 
		/// 服务器端口
		/// </summary>
		public string Port = ""; 
	
	

	} 

}
