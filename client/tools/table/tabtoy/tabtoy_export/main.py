import sys
import os

# 忽略文件名列表
IGNORE_FILENAME_LIST = ["Globals", "Sample"]

# 文件列表
filelist = []


# 得到命令cshape
def get_command_cshape(filenoext, dstdir, dstbindir, index, is_mac_plat):
    cmd = "tabtoy.exe "
    if is_mac_plat:
        cmd = "./tabtoy "

    cmd += "--mode=v2 "
    cmd += "--csharp_out=" + dstdir + filenoext + "Cfg.cs "
    cmd += "--binary_out=" + dstbindir + filenoext.lower() + ".bytes "
    cmd += "--combinename=" + filenoext + "Cfg "

    # cmd += "Globals.xlsx "
    if index == 1:
        cmd += "Globals.xlsx "

    cmd += filenoext + ".xlsx"

    # print("------------------------------------------------")
    # print("get_command_cshape : " + cmd)
    # print("------------------------------------------------")

    return cmd


# 得到命令go
def get_command_go(filenoext, dstdir, dstbindir, index, is_mac_plat):
    cmd = "tabtoy.exe "
    if is_mac_plat:
        cmd = "./tabtoy "

    cmd += "--mode=v2 "
    cmd += "--go_out=" + dstdir + filenoext + "/" + filenoext + ".go "
    cmd += "--json_out=" + dstbindir + filenoext + ".json "
    cmd += "--combinename=Config Globals.xlsx "
    cmd += filenoext + ".xlsx"

    # print("------------------------------------------------")
    # print(cmd)
    # print("------------------------------------------------")

    return cmd


# 得到命令
def get_command_lua(filenoext, dstdir, is_mac_plat):
    # cmd = tabtoy_dir + "tabtoy.exe "

    cmd = "tabtoy.exe "
    if is_mac_plat:
        cmd = "./tabtoy "

    cmd += "--mode=v2 "
    cmd += "--lua_out=" + dstdir + filenoext + ".lua "
    cmd += "--combinename=Config Globals.xlsx "
    cmd += filenoext + ".xlsx"

    # print("------------------------------------------------")
    # print(cmd)
    # print("------------------------------------------------")

    return cmd


# 导出所有的文件
def export_files(tabtoy_dir, lua_c_dstdir, lua_s_dstdir, go_s_dstdir, go_s_dstbindir, cshape_c_dstdir,
                 cshape_c_dstbindir, is_mac_plat):
    index = 0
    for file in os.listdir("."):

        if os.path.splitext(file)[1] != ".xlsx":
            continue

        filenoext = os.path.splitext(file)[0]

        if filenoext in IGNORE_FILENAME_LIST:
            continue

        index += 1

        # 添加文件
        filelist.append(filenoext)

        os.system(get_command_lua(filenoext, lua_c_dstdir, is_mac_plat))
        os.system(get_command_lua(filenoext, lua_s_dstdir, is_mac_plat))
        os.system(get_command_go(filenoext, go_s_dstdir, go_s_dstbindir, index, is_mac_plat))
        os.system(get_command_cshape(filenoext, cshape_c_dstdir, cshape_c_dstbindir, index, is_mac_plat))


# 导出lua管理文件
def export_luamgrfile(file_root_path, require_root_path):
    path = file_root_path + "ConfigMgr.lua"

    filecontent = "-- Generated by github.com/davyxu/tabtoy\n"
    filecontent += "-- Version: 2.9.0\n\n"
    filecontent += "ConfigMgr = {}\n\n"

    for file in filelist:
        filecontent += "ConfigMgr." + file + " = " + "require \"" + require_root_path + file + "\"\n"

    filecontent += "\nreturn ConfigMgr\n"

    # 保存
    file = open(path, "wb")
    file.write(filecontent.encode())
    file.close()


# 导出cshape管理文件
def export_cshapemgrfile(file_root_path):
    path = file_root_path + "ConfigManager.cs"

    filecontent = "// Generated by github.com/davyxu/tabtoy\n"
    filecontent += "// Version: 2.9.0\n\n"

    filecontent += "using gtm;\n"
    filecontent += "using System.IO;\n"
    filecontent += "using tabtoy;\n\n"

    filecontent += "namespace gtmGame\n"
    filecontent += "{\n"
    filecontent += "    public class ConfigManager\n"
    filecontent += "    {\n"

    for file in filelist:
        filecontent += "        public " + file + "Cfg " + file.lower() + "cfg = new " + file + "Cfg();\n\n"

    filecontent += "        public void DoInit()\n"
    filecontent += "        {\n"
    for file in filelist:
        filecontent += "            Init" + file + "Cfg();\n"
    filecontent += "        }\n\n"

    filecontent += "        public void DoClose()\n"
    filecontent += "        {\n"
    filecontent += "        }\n\n"

    filecontent += "        public void DoUpdate()\n"
    filecontent += "        {\n"
    filecontent += "        }\n\n"

    for file in filelist:
        filecontent += "        private void Init" + file + "Cfg()\n"
        filecontent += "        {\n"

        filecontent += "            byte[] bytes = ResourceLoad.instance.LoadResourceSync(\"Config/Table/\", \"" + file.lower() + \
            "\" , \".bytes\", ResourceType.Bytes) as byte[];\n"
        filecontent += "            MemoryStream stream = new MemoryStream(bytes);\n"
        filecontent += "            var reader = new tabtoy.DataReader(stream);\n\n"
        filecontent += "            var result = reader.ReadHeader(" + file.lower() + "cfg.GetBuildID());\n"
        filecontent += "            if (result != FileState.OK)\n"
        filecontent += "            {\n"
        filecontent += "                LogSystem.instance.LogError(LogCategory.GameLogic, \"" + file.lower() + \
            "cfg combine file crack!\");\n"
        filecontent += "                return;\n"
        filecontent += "            }\n\n"
        filecontent += "            " + file + "Cfg.Deserialize(" + file.lower() + "cfg, reader);\n"

        filecontent += "        }\n\n"

    filecontent += "    }\n"
    filecontent += "}\n\n"

    # 保存
    file = open(path, "wb")
    file.write(filecontent.encode())
    file.close()


# 导出go管理文件
def export_gomgrfile(file_root_path):
    path = file_root_path + "CfgMgr.go"

    filecontent = "// Generated by github.com/davyxu/tabtoy\n"
    filecontent += "// Version: 2.9.0\n\n"

    filecontent += "package table\n\n"

    filecontent += "import (\n"
    for file in filelist:
        filecontent += "    " + file + "Table " + "\"Server/cfg/" + file + "\"\n"
    filecontent += ")\n\n"

    filecontent += "var (\n"
    for file in filelist:
        filecontent += "    " + file + "Cfg " + file + "Table.ConfigTable" + "\n"
    filecontent += ")\n\n"

    filecontent += "func LoadTables() {\n"
    for file in filelist:
        filecontent += "    " + file + "Cfg := " + file + "Table.NewConfigTable()" + "\n\n"
        filecontent += "    " + "if err := " + file + "Cfg.Load(\"cfg/" + file + ".json\"); err != nil {\n"
        filecontent += "        panic(err)\n"
        filecontent += "    }\n\n"
    filecontent += "}\n\n"

    # 保存
    file = open(path, "wb")
    file.write(filecontent.encode())
    file.close()


# 导出管理文件
def export_mgrfile(tabtoy_dir, lua_c_dstdir, lua_s_dstdir, go_s_dstdir, cshape_c_dstdir, cshape_c_dstbindir,
                   is_mac_plat):
    export_luamgrfile(lua_c_dstdir, "Cfg.")
    export_luamgrfile(lua_s_dstdir, "")
    export_gomgrfile(go_s_dstdir)
    export_cshapemgrfile(cshape_c_dstdir)


def main():
    tabtoy_dir = sys.argv[1]
    lua_c_dstdir = sys.argv[2]
    lua_s_dstdir = sys.argv[3]
    go_s_dstdir = sys.argv[4]
    go_s_dstbindir = sys.argv[5]
    cshape_c_dstdir = sys.argv[6]
    cshape_c_dstbindir = sys.argv[7]

    is_mac_plat = False
    if sys.argv[8]:
        if int(sys.argv[8]) > 0:
            is_mac_plat = True

    export_files(tabtoy_dir, lua_c_dstdir, lua_s_dstdir, go_s_dstdir, go_s_dstbindir, cshape_c_dstdir,
                 cshape_c_dstbindir, is_mac_plat)
    export_mgrfile(tabtoy_dir, lua_c_dstdir, lua_s_dstdir, go_s_dstdir, cshape_c_dstdir, cshape_c_dstbindir,
                   is_mac_plat)

if __name__ == '__main__':
    main()
